---
title: "Ontology Mapping with or without context"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output:
  BiocStyle::html_document:
    number_sections: yes
    toc: yes
    toc_depth: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE, 
                      warning = FALSE)
```

# Setup
## Load data
```{r}
# SapBERT outputs for disease terms
st <- readr::read_csv("data/st_sapbert_disease.csv")
query <- st$original_value
```

```{r}
failed <- subset_by_top_n(st, 
                          curated_col = "curated_ontology",
                          match_prefix = "top", 
                          match_suffix = "_match")
dim(failed) # 306 failed matches
```

## Source table
```{r}
cbio_all <- readRDS("~/OmicsMLRepo/OmicsMLRepoData/cBioPortalData/source/cBioPortal_all_clinicalData_combined_2023-05-18.rds")
```




# Prepare inputs
## Create 'with context' input table
```{r eval=FALSE}
# remove id/count/NA columns
input1 <- remove_id_count_na_columns(cbio_all)

# concatenate values from all the columns
input2 <- concatenate_row_values(input1)

# identify the row with a keyword in it (one row per keyword)
# system.time(input3 <- find_first_iterative(as.character(unlist(input2)), query))
system.time(input4 <- find_terms_in_context(input2, query))
```

```{r}
fname2 <- paste0("concatenated_cols_for_", length(input2), "_values.csv")
write.table(input2, file.path("data", fname2), row.names = FALSE)

fname4 <- paste0(nrow(input4), "_values_with_context.csv")
write.table(input4, file.path("data", fname4), row.names = FALSE)
```


```{bash eval=FALSE, echo=FALSE}
> system.time(input3 <- find_first_iterative(as.character(unlist(input2)), query))
    user   system  elapsed 
1371.458   17.431 1401.651
> system.time(input4 <- find_terms_in_context(input2, query))
   user  system elapsed 
324.769   4.742 332.634 
> dim(input3)
[1] 1430    2
> dim(input4)
[1] 1553    2
```

Remove terms without context (i.e., can't find the column value including 
query terms, might have been a mistake during harmonization or filtered out)
```{r}
inputs <- na.omit(input4)
failed_terms <- failed$original_value
input_with_context <- inputs %>% filter(term %in% failed_terms)
dim(input_with_context)
```

```{r eval=FALSE}
write.csv(input_with_context, "data/input_with_context.csv", row.names = FALSE)
write.csv(input_with_context[,1,drop = FALSE], "data/input_without_context.csv", row.names = FALSE)
```



# Mapping
Out of 306 failed terms, we tested 263 terms with context.

```{r message=FALSE}
corpus <- readr::read_csv("~/OmicsMLRepo/MetaHarmonizer/data/corpus/cbio_disease/disease_corpus_from_NCIT:C3262.csv")
disease_corpus_label <- corpus$label
write.csv(disease_corpus_label, "data/disease_corpus_label.csv", row.names = FALSE)
```


## With context

Use Claude Sonnet 4.5
Prompt: 
```
I'm trying to standardize clinical metadata of the cancer genomics database to the ontology terms. Can you map the terms in `input_with_context.csv` (supposedly disease-related terms) to the labels in `disease_corpus_label.csv` table? FYI, these are already failed matching terms from exact/fuzzy matching and sentence transformer-based matching. The second column in `input_with_context.csv` includes concatenated values from other columns in the original metadata (format is columName1:value1;columnName2:value2;...). Please use this context during ontology mapping and output the top 5 potential matches.
```

```{r message=FALSE}
matches <- readr::read_csv("data/disease_mapping_with_context.csv") %>%
    dplyr::rename(original_value = input_term)
res_with <- left_join(matches,
                      failed[c("original_value", "curated_ontology")],
                      by = "original_value")

succeed_with <- subset_by_top_n(res_with, 
                              type = "matched",
                              curated_col = "curated_ontology",
                              match_prefix = "match_", 
                              match_suffix = "")

dim(succeed_wo) # out of 166 failed matches with context
```


## Without context

Use Claude Sonnet 4.5
Prompt: 
```
I'm trying to standardize clinical metadata of the cancer genomics database to the ontology terms. Can you map the terms in `input_without_context.csv` (supposedly disease-related terms) to the labels in `disease_corpus_label.csv` table? FYI, these are already failed matching terms from exact/fuzzy matching and sentence transformer-based matching. Please return the top 5 potential matches.
```

```{r message=FALSE}
matches_wo <- readr::read_csv("data/disease_mapping_without_context.csv") %>%
    rename(original_value = input_term)
res_wo <- left_join(matches_wo,
                    failed[c("original_value", "curated_ontology")],
                    by = "original_value")
succeed_wo <- subset_by_top_n(res_wo, 
                              type = "matched",
                              curated_col = "curated_ontology",
                              match_prefix = "match_", 
                              match_suffix = "")
dim(succeed_wo) # 306 failed matches
```





# Generalized ontology mapper
With-context input examples:
```
term,context
AML,"CANCER_TYPE:Leukemia;PRIMARY_SITE:Bone Marrow;AGE:65"
ACYC,"CANCER_TYPE:Salivary Gland Cancer;PRIMARY_SITE:Salivary gland;ONCOTREE_CODE:ACYC"
Metformin,"DRUG_CLASS:Antidiabetic;ROUTE:Oral;INDICATION:Type 2 Diabetes"
```

```{python eval=FALSE}
# Simple use case
python3 ~/OmicsMLRepo/MetaHarmonizer/EDA/Python/generalized_ontology_mapper.py \
  ~/OmicsMLRepo/MetaHarmonizer/EDA/data/input_with_context.csv \
  ~/OmicsMLRepo/MetaHarmonizer/data/corpus/cbio_disease/disease_corpus_from_NCIT:C3262.csv \
  ~/OmicsMLRepo/MetaHarmonizer/EDA/data/disease_om_result_with_context.csv
  
# === Mapping Summary ===
# Total terms processed: 263
# Terms with context: 263
# High-confidence matches (score > 50): 56
```

```{python eval=FALSE}
# Simple use case
python3 ~/OmicsMLRepo/MetaHarmonizer/EDA/Python/generalized_ontology_mapper.py \
  ~/OmicsMLRepo/MetaHarmonizer/EDA/data/input_without_context.csv \
  ~/OmicsMLRepo/MetaHarmonizer/data/corpus/cbio_disease/disease_corpus_from_NCIT:C3262.csv \
  ~/OmicsMLRepo/MetaHarmonizer/EDA/data/disease_om_result_without_context.csv
  
# === Mapping Summary ===
# Total terms processed: 263
# Terms with context: 0
# High-confidence matches (score > 50): 56 
```


```{python eval=FALSE}
python3 generalized_ontology_mapper.py \
    input_with_context.csv \
    ontology.csv \
    output.csv \
    --config config_disease.json \
    --input-context-col context
```

## Check results
```{r message=FALSE}
matches_with <- readr::read_csv("data/disease_om_result_with_context.csv") %>%
    rename(original_value = input_term)

res_with <- left_join(matches_with,
                    failed[c("original_value", "curated_ontology")],
                    by = "original_value")

succeed_with <- subset_by_top_n(res_with, 
                              type = "matched",
                              curated_col = "curated_ontology",
                              match_prefix = "match_", 
                              match_suffix = "")
dim(succeed_with) 
```

```{r message=FALSE}
matches_wo <- readr::read_csv("data/disease_om_result_without_context.csv") %>%
    rename(original_value = input_term)

res_wo <- left_join(matches_wo,
                    failed[c("original_value", "curated_ontology")],
                    by = "original_value")

succeed_wo <- subset_by_top_n(res_wo, 
                              type = "matched",
                              curated_col = "curated_ontology",
                              match_prefix = "match_", 
                              match_suffix = "")
dim(succeed_wo) 
```


# Evaluation by LLM

Prepare input for LLM evaluation
```{r}
st_sub <- st[c("original_value", grep("_match", colnames(st), value = TRUE))]
write.csv(st_sub, "data/st_sub_for_LLM_evaluation.csv", row.names = FALSE)
```

Use Claude Sonnet 4.5
Prompt:
```
I'm standardizing disease-related values in the clinical metadata by mapping them into controlled vocabularies (i.e., ontology). Can you evaluate the accuracy/confidence of the mapping in this result for each level of matches? original_value is mapped to five candidates (top*_match). Please return your evaluation in a csv form (i.e., evaluation attached to my result table).
```

```{r message=FLASE}
eval <- readr::read_csv("data/disease_mapping_evaluation.csv")
eval <- eval[, !grepl("^top\\d+_match$", colnames(eval))]

evalAll <- dplyr::left_join(st, eval, by = "original_value")
```


# Plotting
Proportion of 'correct matches' across ontology mapping results with or 
without context, categorized by the Claude-suggested confidence metric. 

```{r}

```

